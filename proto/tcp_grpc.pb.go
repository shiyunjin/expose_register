// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.5.1
// source: tcp.proto

package protoc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TCP_Connect_FullMethodName = "/Tcp.TCP/Connect"
)

// TCPClient is the client API for TCP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TCPClient interface {
	Connect(ctx context.Context, opts ...grpc.CallOption) (TCP_ConnectClient, error)
}

type tCPClient struct {
	cc grpc.ClientConnInterface
}

func NewTCPClient(cc grpc.ClientConnInterface) TCPClient {
	return &tCPClient{cc}
}

func (c *tCPClient) Connect(ctx context.Context, opts ...grpc.CallOption) (TCP_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &TCP_ServiceDesc.Streams[0], TCP_Connect_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tCPConnectClient{stream}
	return x, nil
}

type TCP_ConnectClient interface {
	Send(*Resp) error
	Recv() (*Req, error)
	grpc.ClientStream
}

type tCPConnectClient struct {
	grpc.ClientStream
}

func (x *tCPConnectClient) Send(m *Resp) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tCPConnectClient) Recv() (*Req, error) {
	m := new(Req)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TCPServer is the server API for TCP service.
// All implementations must embed UnimplementedTCPServer
// for forward compatibility
type TCPServer interface {
	Connect(TCP_ConnectServer) error
	mustEmbedUnimplementedTCPServer()
}

// UnimplementedTCPServer must be embedded to have forward compatible implementations.
type UnimplementedTCPServer struct {
}

func (UnimplementedTCPServer) Connect(TCP_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedTCPServer) mustEmbedUnimplementedTCPServer() {}

// UnsafeTCPServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TCPServer will
// result in compilation errors.
type UnsafeTCPServer interface {
	mustEmbedUnimplementedTCPServer()
}

func RegisterTCPServer(s grpc.ServiceRegistrar, srv TCPServer) {
	s.RegisterService(&TCP_ServiceDesc, srv)
}

func _TCP_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TCPServer).Connect(&tCPConnectServer{stream})
}

type TCP_ConnectServer interface {
	Send(*Req) error
	Recv() (*Resp, error)
	grpc.ServerStream
}

type tCPConnectServer struct {
	grpc.ServerStream
}

func (x *tCPConnectServer) Send(m *Req) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tCPConnectServer) Recv() (*Resp, error) {
	m := new(Resp)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TCP_ServiceDesc is the grpc.ServiceDesc for TCP service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TCP_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Tcp.TCP",
	HandlerType: (*TCPServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _TCP_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "tcp.proto",
}
